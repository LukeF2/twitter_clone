name: tests

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup dependencies
      run: |
        pip3 install -r services/web/requirements.txt
    
    - name: Create .env.dev file
      run: |
        echo "DATABASE=postgres" > .env.dev
        echo "SQL_HOST=db" >> .env.dev
        echo "SQL_PORT=5432" >> .env.dev
        echo "FLASK_DEBUG=1" >> .env.dev
        echo "POSTGRES_USER=hello_flask" >> .env.dev
        echo "POSTGRES_PASSWORD=hello_flask" >> .env.dev
        echo "POSTGRES_DB=hello_flask_dev" >> .env.dev
    
    - name: Start containers and test
      run: |
        # Build and start all services
        docker compose up -d --build
        docker ps -a
        
        # Wait for web service to be ready
        echo "Waiting for web service..."
        for i in {1..30}; do
          if docker compose ps web | grep -q "Up"; then
            echo "Web service is up!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Web service failed to start"
            docker compose logs web
            exit 1
          fi
          sleep 1
        done
        
        # Wait for database to be ready
        echo "Waiting for database..."
        for i in {1..30}; do
          if docker compose exec -T db pg_isready -U hello_flask; then
            echo "Database is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Database failed to start"
            docker compose logs db
            exit 1
          fi
          sleep 1
        done

        # Load schema
        echo "Loading schema..."
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -f /docker-entrypoint-initdb.d/schema.sql

        # Wait a bit for schema to be loaded
        sleep 2

        # Load test data
        echo "Loading test data..."
        docker compose exec -T db /opt/venv/bin/python /docker-entrypoint-initdb.d/load_data.py 100
        
        # Verify data was loaded
        echo "Verifying data..."
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM users;"
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM tweets;"
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM likes;"
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v 