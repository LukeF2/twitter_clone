name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: hello_flask
          POSTGRES_PASSWORD: hello_flask
          POSTGRES_DB: hello_flask_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://hello_flask:hello_flask@localhost:5432/hello_flask_test
      run: |
        # Build and start all services
        docker compose up -d --build
        docker ps -a
        
        # Wait for web service to be ready
        echo "Waiting for web service..."
        for i in {1..30}; do
          if docker compose ps web | grep -q "Up"; then
            echo "Web service is up!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Web service failed to start"
            docker compose logs web
            exit 1
          fi
          sleep 1
        done
        
        # Wait for database to be ready
        echo "Waiting for database..."
        for i in {1..30}; do
          if docker compose exec -T db pg_isready -U hello_flask; then
            echo "Database is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Database failed to start"
            docker compose logs db
            exit 1
          fi
          sleep 1
        done

        # Load schema
        echo "Loading schema..."
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -f /docker-entrypoint-initdb.d/schema.sql

        # Wait a bit for schema to be loaded
        sleep 2

        # Load test data
        echo "Loading test data..."
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -f /docker-entrypoint-initdb.d/generate_data.sql
        
        # Verify data was loaded
        echo "Verifying data..."
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM users;"
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM tweets;"
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM likes;"
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v 