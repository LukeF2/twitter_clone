name: Tests

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Start containers and test
      run: |

        # Build and start all services
        docker compose up -d --build
        
        # Wait for database to be ready
        echo "Waiting for database..."
        for i in {1..30}; do
          if docker compose exec -T db pg_isready -U hello_flask; then
            echo "Database is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Database failed to start"
            docker compose logs db
            exit 1
          fi
          sleep 1
        done

        # Load schema
        echo "Loading schema..."
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -f /docker-entrypoint-initdb.d/schema.sql

        # Load test data
        echo "Loading test data..."
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -f /docker-entrypoint-initdb.d/generate_test_data.sql
        
        # Verify data was loaded
        echo "Verifying data..."
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM users;"
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM tweets;"
        docker compose exec -T db psql -U hello_flask -d hello_flask_dev -c "SELECT COUNT(*) FROM likes;"
    
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v 

        # Create database tables
        python services/web/project/project.py
        # Load test data using generate_test_data.sql (100 rows per table)
        PGPASSWORD=hello_flask psql -h localhost -U hello_flask -d hello_flask_test -f services/postgres/generate_test_data.sql
        # Run tests
        pytest 
